{"version":3,"sources":["context/index.tsx","Fallback/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","isLoggedIn","JSON","parse","localStorage","getItem","serverdata","client_id","process","redirect_uri","client_secret","proxy_url","Context","createContext","state","dispatch","value","reducer","action","type","setItem","stringify","payload","clear","Provider","children","useReducer","Fallback","style","display","alignItems","justifyContent","height","width","background","size","color","App","fallback","path","component","React","lazy","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","axios","defaults","baseURL","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"2MAEaA,EAAe,CAC1BC,WAAYC,KAAKC,MAAMC,aAAaC,QAAQ,eAAiB,SAC7DC,WAAYJ,KAAKC,MAAMC,aAAaC,QAAQ,eAAiB,QAC7DE,UAAWC,uBACXC,aAAcD,8BACdE,cAAeF,2CACfG,UAAWH,sCAGAI,EAAUC,wBAAc,CACnCC,MAAO,CACLb,YAAY,EACZK,WAAY,KACZC,UAAWC,uBACXC,aAAcD,8BACdE,cAAeF,2CACfG,UAAWH,sCAEbO,SAAU,SAACC,OAGAC,EAAU,SAACH,EAAYI,GAClC,OAAQA,EAAOC,MACb,IAAK,QASH,OARAf,aAAagB,QACX,aACAlB,KAAKmB,UAAUH,EAAOI,QAAQrB,aAEhCG,aAAagB,QACX,aACAlB,KAAKmB,UAAUH,EAAOI,QAAQhB,aAEzB,2BACFQ,GADL,IAEEb,WAAYiB,EAAOI,QAAQrB,WAC3BK,WAAYY,EAAOI,QAAQhB,aAG/B,IAAK,SAEH,OADAF,aAAamB,QACN,2BACFT,GADL,IAEEb,YAAY,EACZK,WAAY,OAGhB,QACE,OAAOQ,IAIAU,EAAqB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACxBC,qBAAWT,EAASjB,GADI,mBAC3Cc,EAD2C,KACpCC,EADoC,KAGlD,OACE,cAACH,EAAQY,SAAT,CACER,MAAO,CACLF,QACAC,YAHJ,SAMGU,M,gJC5DME,EAAW,WACtB,OACE,qBACEC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,QACRC,MAAO,QACPC,WAAY,WAPhB,SAUE,cAAC,IAAD,CAAYC,KAAM,IAAKC,MAAM,aCOpBC,EAlBH,kBACV,cAAC,WAAD,CAAUC,SAAU,cAAC,EAAD,IAApB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,KAAK,SACLC,UAAWC,IAAMC,MAAK,kBAAM,yDAE9B,cAAC,IAAD,CACEC,OAAK,EACLJ,KAAK,IACLC,UAAWC,IAAMC,MAAK,kBAAM,wECDvBE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iDCCRQ,EAAc,IAAIC,IAExBC,IAAMC,SAASC,QAGT,sBAENC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAqBC,OAAQT,EAA7B,SACE,cAAC,IAAD,UACE,cAAC,EAAD,UAINU,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.065700a8.chunk.js","sourcesContent":["import { createContext, useReducer } from \"react\";\r\n\r\nexport const initialState = {\r\n  isLoggedIn: JSON.parse(localStorage.getItem(\"isLoggedIn\") || \"false\"),\r\n  serverdata: JSON.parse(localStorage.getItem(\"serverdata\") || \"null\"),\r\n  client_id: process.env.REACT_APP_GITHUB_CLIENT_ID,\r\n  redirect_uri: process.env.REACT_APP_GITHUB_OAUTH_REDIRECT_URI_DEV,\r\n  client_secret: process.env.REACT_APP_GITHUB_SECRET,\r\n  proxy_url: process.env.REACT_APP_PROXY_URL,\r\n};\r\n\r\nexport const Context = createContext({\r\n  state: {\r\n    isLoggedIn: false,\r\n    serverdata: null,\r\n    client_id: process.env.REACT_APP_GITHUB_CLIENT_ID,\r\n    redirect_uri: process.env.REACT_APP_GITHUB_OAUTH_REDIRECT_URI_DEV,\r\n    client_secret: process.env.REACT_APP_GITHUB_SECRET,\r\n    proxy_url: process.env.REACT_APP_PROXY_URL,\r\n  },\r\n  dispatch: (value: any) => {},\r\n});\r\n\r\nexport const reducer = (state: any, action: any) => {\r\n  switch (action.type) {\r\n    case \"LOGIN\": {\r\n      localStorage.setItem(\r\n        \"isLoggedIn\",\r\n        JSON.stringify(action.payload.isLoggedIn)\r\n      );\r\n      localStorage.setItem(\r\n        \"serverdata\",\r\n        JSON.stringify(action.payload.serverdata)\r\n      );\r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.payload.isLoggedIn,\r\n        serverdata: action.payload.serverdata,\r\n      };\r\n    }\r\n    case \"LOGOUT\": {\r\n      localStorage.clear();\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        serverdata: null,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const Provider: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        state,\r\n        dispatch,\r\n      }}\r\n    >\r\n      {children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nexport const Fallback = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        background: \"#222a31\",\r\n      }}\r\n    >\r\n      <ClipLoader size={200} color=\"white\" />\r\n    </div>\r\n  );\r\n};\r\n","import React, { Suspense } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Fallback } from \"./Fallback\";\n\nconst App = () => (\n  <Suspense fallback={<Fallback />}>\n    <Router>\n      <Switch>\n        <Route\n          path=\"/login\"\n          component={React.lazy(() => import(\"./unauthenticated-app\"))}\n        />\n        <Route\n          exact\n          path=\"/\"\n          component={React.lazy(() => import(\"./authenticated-app\"))}\n        />\n      </Switch>\n    </Router>\n  </Suspense>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"./context\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport axios from \"axios\";\n\nconst queryClient = new QueryClient();\n\naxios.defaults.baseURL =\n  process.env.NODE_ENV === \"development\"\n    ? \"https://cors-anywhere.herokuapp.com/https://github.com/\"\n    : \"https://github.com/\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <Provider>\n        <App />\n      </Provider>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}